<?php
declare(strict_types=1);
namespace A\B;


//ini_set('error_reporting',-1);
include 'A.php';
use A\A as B;

//$c = new A();
function dog(){
var_dump("fsfad");

}
//$c->dog();
function recursion($a)
{
//    if ($a < 256) {
        if ($a < 2) {
        echo "$a\n";

    //    if($a!==255)
//        recursion($a + 1);
            dog();
    }
}
recursion(1);
function makecoffee($types = array("cappuccino"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Making a cup of ".join(", ", $types)." with $device.\n";
}
echo makecoffee();
echo makecoffee(array("cappuccino", "lavazza"), "teapot");
function sum(int $a, int $b) {
    return $a + $b;
}

var_dump(sum(1, 2));

// These will be coerced to integers: note the output below!
//var_dump(sum(1.5, 2.5));

function cat(int &...$arr){

    foreach ($arr as &$value)
        $value ++;
}
$arr = [1,2,3];
$c = 5;

function &rea(&$var){

    return $var;
//    return 8;


}

$c = 8;
$b =rea($c);

$c =90;
var_dump($b);

echo $cm;
cat(...$arr);
var_dump($arr,$c);





class D{
//use M;
function dog(D $c)   {


}

}
trait M{

   function cat(parent $obj){


   }
}
class E extends D{
use M;

}

$obja = new E();
$obja->dog($obja);
$obja->cat($obja);
$obj = new D();
$obj->dog($obj);
//$obj->cat($obj);


function cata(E $a = null){


}
cata(null);
cata($obja);
class F
{
    function tfloat( subF $f): int
    {

       // return [1,2,3];
//return  new F;
        return  3;
    }
}
//(new F())->tfloat(2);

class subF extends F{

   function tfloat(float $f): int
   {
       return parent::tfloat($f); // TODO: Change the autogenerated stub
   }
}

function tnull(): ?int{

    return  null;

}

tnull();

class Foo
{
    static $variable = 'static property';
    static function Variable()
    {
        echo 'Method Variable called';
    }
    public  $arr=[1,2,3];
}

echo Foo::$variable; // This prints 'static property'. It does need a $variable in this scope.
$variable = "Variable";
Foo::{$variable}();  // This calls $foo->Variable() reading $variable in this scope.

$arr=['arr'];
var_dump( (new Foo)->{$arr[0]});//[1,2,3]
$obj = new Foo;
$arr = 'arr';
echo $obj->{$arr}[0];//1
echo $obj->$arr[0];//1
echo FOO::$variable[1];
//echo FOO::$variable[1];
//var_dump(setlocale());
var_dump(ord('á'));
var_dump('?');
var_dump(ord(strtoupper('á')),ord('á'[0]),ord('á'[1]));

