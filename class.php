<?php
class A{

   public function dog(array $a){


   }
}


class B extends  A{
    static $st;
    function dog( $a)
    {
        parent::dog($a); // TODO: Change the autogenerated stub
    }

 static   function  getsta(){

        var_dump(self::$st);
    }
}


$obj = new B();

$obj->dog([1,2,3]);


function dog($a,$b,$c){
    var_dump($a,$b,$c);
}

//dog(...['a'=>1,'b'=>2,'c'=>3]);
B::$st =333;


B::$st = &$c;
var_dump(B::$st);
B::getsta();

var_dump($obj::$st);

abstract class M{

    function dog(array $c){

    }
}

abstract class N extends M{

    function dog( iterable $c): int
    {
    //    parent::dog(); // TODO: Change the autogenerated stub
    }
}

function cat($a,$b){

var_dump($a,$b);
}

cat(1,2);

 $gen = (function (){

   yield from ['a'=>1,2,3] ;
})();

/* foreach ($gen as $value){

     var_dump($value);
 }
*/
 cat(...$gen);
